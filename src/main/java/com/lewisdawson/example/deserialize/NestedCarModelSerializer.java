package com.lewisdawson.example.deserialize;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ser.ResolvableSerializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.lewisdawson.example.model.NestedCarModel;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

/**
 * A custom serializer used to serialize a {@link NestedCarModel} object into a json string.
 *
 * @author Lewis Dawson <lew.dawson@lewdawson.com>
 */
public class NestedCarModelSerializer extends StdSerializer implements ResolvableSerializer {

    /**
     * The default {@link JsonSerializer}, created by Jackson, that we will delegate to for serialization of the json.
     */
    private final JsonSerializer<Object> defaultJsonSerializer;

    /**
     * The json path to the data that maps to the {@link NestedCarModel} object.
     */
    private final String[] modelTraversalPath;

    /**
     * The {@link JsonFactory} used to create {@link JsonParser} instances.
     */
    private final JsonFactory jsonFactory;

    /**
     * @param jsonFactory
     *         The {@link JsonFactory} used to create a {@link JsonParser}
     * @param defaultJsonSerializer
     *         The default {@link JsonSerializer} instantiated by Jackson at runtime
     * @param modelTraversalPath
     *         The json object path to used generate to nested the {@link NestedCarModel} object.
     */
    public NestedCarModelSerializer(JsonFactory jsonFactory, JsonSerializer<Object> defaultJsonSerializer, String[] modelTraversalPath) {
        super(NestedCarModel.class);

        this.jsonFactory = jsonFactory;
        this.defaultJsonSerializer = defaultJsonSerializer;
        this.modelTraversalPath = modelTraversalPath;
    }

    /**
     * {@inheritDoc}
     */
    public void resolve(SerializerProvider serializerProvider) throws JsonMappingException {
        ((ResolvableSerializer) defaultJsonSerializer).resolve(serializerProvider);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void serialize(Object nestedCarModel, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
        JsonGenerator tempGenerator = jsonFactory.createGenerator(new ByteArrayOutputStream());

        // Use the default Jackson serializer
        defaultJsonSerializer.serialize(nestedCarModel, tempGenerator, serializerProvider);
        // Flush the serialized string to the stream so it can be retrieved
        tempGenerator.flush();

        // Create the root object
        jsonGenerator.writeStartObject();
        jsonGenerator.flush();
        for (String path : modelTraversalPath) {
            // Write each object path to the final generator
            jsonGenerator.writeObjectFieldStart(path);
        }

        ByteArrayOutputStream baos = (ByteArrayOutputStream) tempGenerator.getOutputTarget();
        String generatedJson = baos.toString();
        // Strip the root objects out of the json generated by default serializer
        generatedJson = generatedJson.substring(1, generatedJson.length() - 1);
        tempGenerator.close();

        // Write the raw data generated by the default serializer to the JsonGenerator
        jsonGenerator.writeRaw(generatedJson);

        for (int i = 0; i < modelTraversalPath.length; i++) {
            // Close each object path on the final generator
            jsonGenerator.writeEndObject();
        }

        // Close the root object
        jsonGenerator.writeEndObject();
        jsonGenerator.flush();
    }

}